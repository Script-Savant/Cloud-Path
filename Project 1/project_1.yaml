AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for a three tier app architecture in AWS.'

# Parameters for customization
Parameters:
  VpcCIDR:
    Type: String
    Default: 172.20.0.0/20
    Description: CIDR block for the VPC
  PublicWebSubnet1CIDR:
    Type: String
    Default: 172.20.1.0/24
    Description: CIDR block for the first web public subnet
  PublicWebSubnet2CIDR:
    Type: String
    Default: 172.20.2.0/24
    Description: CIDR block for the second web public subnet
  PrivateAppSubnet1CIDR:
    Type: String
    Default: 172.20.3.0/24
    Description: CIDR block for the first app private subnet
  PrivateAppSubnet2CIDR:
    Type: String
    Default: 172.20.4.0/24
    Description: CIDR block for the second app private subnet
  PrivateDBSubnet1CIDR:
    Type: String
    Default: 172.20.5.0/24
    Description: CIDR block for the first db private subnet
  PrivateDBSubnet2CIDR:
    Type: String
    Default: 172.20.6.0/24
    Description: CIDR block for the second db private subnet

# Define Resources
Resources:
  # VPC configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  # Attach IGW to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public web subnets
  PublicWebSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicWebSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicWebSubnet1'
  PublicWebSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicWebSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicWebSubnet2'

  # Private Subnets for app
  PrivateAppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateAppSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateAppSubnet1'
  PrivateAppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateAppSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateAppSubnet2'

  # Private Subnets for db
  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateDBSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateDBSubnet1'
  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateDBSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateDBSubnet2'

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref PublicWebSubnet1
        - !Ref PublicWebSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALB'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALBListener'

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Name: !Sub '${AWS::StackName}-ALB-TG'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALBTargetGroup'

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ALBSG'

  # Security Group for EC2 Instances
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for application EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AppSG'

  # EC2 Instances for Application
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c55b159cbfafe1f0 # Amazon Linux 2 AMI
      KeyName: your-key-pair-name
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - !Ref AppSecurityGroup
          SubnetId: !Ref PrivateAppSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-App1'
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c55b159cbfafe1f0
      KeyName: your-key-pair-name
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - !Ref AppSecurityGroup
          SubnetId: !Ref PrivateAppSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-App2'

  # Route 53 Hosted Zone
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: example.com
      HostedZoneConfig:
        Comment: Hosted Zone for example.com

  # Route 53 Record Set
  ALBRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: www.example.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt ALB.DNSName
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneId
      TTL: '60'

  # RDS Instance
  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: mydb
      Engine: MySQL
      MasterUsername: admin
      MasterUserPassword: !Ref 'DBPassword'
      DBInstanceClass: db.t3.micro

  



